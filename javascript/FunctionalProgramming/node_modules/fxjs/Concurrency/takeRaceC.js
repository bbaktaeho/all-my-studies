"use strict";

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.map");

require("core-js/modules/es.promise");

var curry = require("../Strict/curry.js");

var nop = require("../Strict/nop.js");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

module.exports = curry(function takeRaceC(l, iter) {
  return new Promise((resolve, reject) => {
    let res = [];
    Promise.all([...iter].map( /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(function* (a) {
        try {
          const b = yield a;
          res.push(b);
          if (res.length == l) resolve(res);
          return b;
        } catch (e) {
          if (e != nop) throw e;
        }
      });

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }())).then(_ => resolve(res)).catch(reject);
  });
});