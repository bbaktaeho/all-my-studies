"use strict";

require("core-js/modules/es.promise");

var toIter = require("./toIter.js");

var curry = require("./curry.js");

var go1 = require("./go1.js");

var nop = require("./nop.js");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

module.exports = curry(function takeWhile(f, iter) {
  let res = [];
  iter = toIter(iter);
  return function recur() {
    let cur;

    while (!(cur = iter.next()).done) {
      const a = cur.value;
      const b = go1(a, a => f(a, res));
      if (!b) return res;

      if (b instanceof Promise) {
        return b.then( /*#__PURE__*/function () {
          var _ref = _asyncToGenerator(function* (b) {
            return b ? (res.push(yield a), recur()) : res;
          });

          return function (_x) {
            return _ref.apply(this, arguments);
          };
        }()).catch(e => e == nop ? recur() : Promise.reject(e));
      }

      res.push(a);
    }

    return res;
  }();
});